From: Mohammed Hassan <mohammed.hassan@jolla.com>
Date: Thu, 5 Mar 2015 17:12:13 +0200
Subject: qtmux: write rotation information into the TKHD matrix

This patch handles the simple cases of 0, 90, 180 and 270

We simply catch the image orientation event and translate that into
the corresponding transformation matrix.

Based on the work of Andrew den Exter <andrew.den.exter@jollamobile.com>

Origin: vendor, https://git.sailfishos.org/mer-core/gst-plugins-good/blob/ea3b4000bc82100e9707a7e80f12c141ef8c3c49/rpm/0002-qtmux-write-rotation-information-into-the-TKHD-matri.patch
Last-Update: 2019-09-22
---
 gst/isomp4/atoms.c    | 31 +++++++++++++++++++++++++++++++
 gst/isomp4/atoms.h    |  2 ++
 gst/isomp4/gstqtmux.c | 25 +++++++++++++++++++++++++
 3 files changed, 58 insertions(+)

diff --git a/gst/isomp4/atoms.c b/gst/isomp4/atoms.c
index e0ec513..d8f0d9f 100644
--- a/gst/isomp4/atoms.c
+++ b/gst/isomp4/atoms.c
@@ -3565,6 +3565,37 @@ atom_trak_set_subtitle_type (AtomTRAK * trak, AtomsContext * context,
   return tx3g;
 }
 
+void
+atom_trak_set_video_transform (AtomTRAK * trak, gint rotation)
+{
+  switch (rotation) {
+  case 0:
+    trak->tkhd.matrix[0] = 1 << 16;
+    trak->tkhd.matrix[1] = 0;
+    trak->tkhd.matrix[3] = 0;
+    trak->tkhd.matrix[4] = 1 << 16;
+    break;
+  case 90:
+    trak->tkhd.matrix[0] = 0;
+    trak->tkhd.matrix[1] = 1 << 16;
+    trak->tkhd.matrix[3] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[4] = 0;
+    break;
+  case 180:
+    trak->tkhd.matrix[0] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[1] = 0;
+    trak->tkhd.matrix[3] = 0;
+    trak->tkhd.matrix[4] = G_MAXUINT16 << 16;
+    break;
+  case 270:
+    trak->tkhd.matrix[0] = 0;
+    trak->tkhd.matrix[1] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[3] = 1 << 16;
+    trak->tkhd.matrix[4] = 0;
+    break;
+  }
+}
+
 static void
 atom_mfhd_init (AtomMFHD * mfhd, guint32 sequence_number)
 {
diff --git a/gst/isomp4/atoms.h b/gst/isomp4/atoms.h
index b105a4d..c818b66 100644
--- a/gst/isomp4/atoms.h
+++ b/gst/isomp4/atoms.h
@@ -937,6 +937,8 @@ SampleTableEntryMP4V * atom_trak_set_video_type (AtomTRAK * trak, AtomsContext *
 SampleTableEntryTX3G * atom_trak_set_subtitle_type (AtomTRAK * trak, AtomsContext * context,
                                SubtitleSampleEntry * entry);
 
+void atom_trak_set_video_transform (AtomTRAK * trak, gint rotation);
+
 void atom_trak_update_bitrates (AtomTRAK * trak, guint32 avg_bitrate,
                                 guint32 max_bitrate);
 
diff --git a/gst/isomp4/gstqtmux.c b/gst/isomp4/gstqtmux.c
index 5be830b..10a959f 100644
--- a/gst/isomp4/gstqtmux.c
+++ b/gst/isomp4/gstqtmux.c
@@ -4237,6 +4237,7 @@ gst_qt_mux_sink_event (GstCollectPads * pads, GstCollectData * data,
       GstTagMergeMode mode;
       gchar *code;
       GstQTPad *collect_pad;
+      gchar *orientation;
 
       GST_OBJECT_LOCK (qtmux);
       mode = gst_tag_setter_get_tag_merge_mode (setter);
@@ -4283,6 +4284,30 @@ gst_qt_mux_sink_event (GstCollectPads * pads, GstCollectData * data,
         g_free (code);
       }
 
+      if (gst_tag_list_get_string (list, GST_TAG_IMAGE_ORIENTATION, &orientation)) {
+	GstQTPad *qtpad = gst_pad_get_element_private (pad);
+	g_assert (qtpad);
+
+	if (qtpad->trak) {
+	  gint rotation = -1;
+	  if (strcmp(orientation, "rotate-0") == 0)
+	    rotation = 0;
+	  else if (strcmp(orientation, "rotate-90") == 0)
+	    rotation = 90;
+	  else if (strcmp(orientation, "rotate-180") == 0)
+	    rotation = 180;
+	  else if (strcmp(orientation, "rotate-270") == 0)
+	    rotation = 270;
+
+	  if (rotation != -1) {
+	    GST_DEBUG_OBJECT (qtmux, "setting rotation to %d", rotation);
+	    atom_trak_set_video_transform (qtpad->trak, rotation);
+	  }
+	}
+
+	g_free (orientation);
+      }
+
       gst_event_unref (event);
       event = NULL;
       ret = TRUE;
-- 
2.8.1

